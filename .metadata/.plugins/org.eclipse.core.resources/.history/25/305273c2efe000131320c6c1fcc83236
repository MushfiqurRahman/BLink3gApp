package com.example.machinemanagement;



import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class WorkDetailActivity extends Activity{
	
	public Spinner spnMachine, spnProblem, spnStatus;
	Button btnUpload, btnLogout;
	public boolean formReady = false;
	
	
	private String provider;
	
	private String methodInAsync;
	private double lattitude, longitude;
	private int[] statusIds, problemIds, machineIds;
	
	public String responseString;
	
	private int sessionId, companyId, engineerId;
	
	private LocationManager locManager;
	Location location;
	
	
	private LocationListener locListener = new LocationListener() {
		
		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onProviderEnabled(String provider) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onProviderDisabled(String provider) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onLocationChanged(Location location) {
			location = location;
			
		}
	};
	
	@Override
	protected void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_work_detail);			
		
		Bundle extras = getIntent().getExtras();
		
		sessionId = Integer.parseInt(extras.getString("session_id"));
		engineerId = Integer.parseInt(extras.getString("engineer_id"));
		companyId = Integer.parseInt(extras.getString("company_id"));		
		
		get_machine_problem_status();
		
		btnUpload = (Button)findViewById(R.id.btnUpload);
		btnUpload.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if( formReady ){					
					if( validate_form() ){
					
//					if( comment.getText().toString().trim().length() > 0 ){
						
						locManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
						boolean gpsEnabled = locManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
				        boolean networkEnabled = locManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
				        
				        if (!gpsEnabled && !networkEnabled) {
				        	show_alert_dialog("Network error!", "Neither the Network nor the GPS is enabled! Please enable them first.");
				        } else {
				        	boolean latLongFound = false;
				            //this.canGetLocation = true;
				            if (networkEnabled) {
				            	locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locListener);
				                Log.d("Network", "Network Enabled");

			                    location = locManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
			                    if (location != null) {
			                        lattitude = location.getLatitude();
			                        longitude = location.getLongitude();
			                        latLongFound = true;
			                    }
				            }			            
				            if( gpsEnabled ){
				            	locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locListener);
							    location = locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
			
							    // Initialize the location fields
							    if (location != null) {
							      lattitude = location.getLatitude();
							      longitude = location.getLongitude();
							      latLongFound = true;						      
							      //onLocationChanged(location);
							    }	
							}
				            if( latLongFound ){
				            	save_work_detail();
				            }else{
				            	show_alert_dialog("Technical Error!", "Neither the Network nor the GPS gives location reading!");
				            }
				        }
					}
				}else{
					Toast.makeText(WorkDetailActivity.this, "Please wait a while. Form is yet to be ready.", Toast.LENGTH_LONG).show();
				}
			}			
		});
	    
		
		//now logout
		btnLogout = (Button)findViewById(R.id.btnLogout);
		btnLogout.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				//confirm he wish to logout
				logout();				
			}
		});
	    
	}
	
	/**
	 * 
	 * @return
	 */
	public boolean validate_form(){
		EditText comment = (EditText)findViewById(R.id.etComment);
		if(machineIds[(int) spnMachine.getSelectedItemId()]==0 ){
			show_alert_dialog("Validation Error!",  "You have selected no Machine, Please select a Machine.");
			return false;
		}else if(problemIds[(int)spnProblem.getSelectedItemId()]==0 ){
			show_alert_dialog("Validation Error!", "You have selected no Problem, Please select a Problem.");
			return false;
		}else if(statusIds[(int)spnStatus.getSelectedItemId()]==0 ){
			show_alert_dialog("Validation Error!", "You have selected no Status, Please select a Status.");
			return false;
		}else if( comment.getText().toString().trim().length() < 1 ){
			show_alert_dialog("Validation Error!", "Comment field can not be left blank, Please give your Comment.");
			return false;
		}
		return true;        
	}
	
	/**
	 * 
	 * @param title
	 * @param msg
	 */
	protected void show_alert_dialog(String title, String msg){
    	AlertDialog alertDialog = new AlertDialog.Builder(WorkDetailActivity.this).create();

        alertDialog.setTitle(title);
        alertDialog.setMessage(msg);
        alertDialog.setCancelable(true);
        
        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK", new DialogInterface.OnClickListener() {							
			@Override
			public void onClick(DialogInterface dialog, int which) {
				//nothing need to do
			}
		});
        alertDialog.show();
	}
	
	/**
	 * 
	 */
	protected void get_machine_problem_status(){
		methodInAsync = "get_machine_problem_status";
		String url = MainActivity.API_URL+"get_machine_problem_status?token=Test_token";
		MakeAPICall apiCall = new MakeAPICall();
		apiCall.execute(new String[] { url });
	}
	
	/**
	 * 
	 */
	protected void save_work_detail(){			        
        SaveWorkDetail workDetail = new SaveWorkDetail();
        workDetail.execute("");	      
	}
	
	/**
	 * When user logout users token should be deleted first
	 */
	protected void destroy_session(){
		methodInAsync = "destroy_session";
		String url = MainActivity.API_URL+"destroy_session?session_id="+String.valueOf(sessionId);
		MakeAPICall apiCall = new MakeAPICall();
		apiCall.execute(new String[] { url });
	}
	
	protected void logout(){
		destroy_session();
	}
	
	/* Request updates at startup */
	  @Override
	  protected void onResume() {
	    super.onResume();
	    //locManager.requestLocationUpdates(provider, 400, 1, this);
	  }

	  /* Remove the locationlistener updates when Activity is paused */
	  @Override
	  protected void onPause() {
	    super.onPause();
	    //locManager.removeUpdates(this);
	  }
	
	/**
	 * 
	 * @param responseStr
	 */
	public void populate_machine_spinner(String responseStr){
		try{
			JSONObject obj = new JSONObject(responseStr);
			
			String[] id,name;					
			JSONObject jdata = obj.getJSONObject("Machine");

			id = new String[jdata.length() + 1];
			name = new String[jdata.length() + 1];
			machineIds = new int[jdata.length() + 1];

			Iterator<?> keys = jdata.keys();
			
			id[0] = "0";
			machineIds[0] = 0;
			name[0] = "Select Machine";

			for(int i=1;i<=jdata.length();i++){
				id[i] = (String) keys.next();
				machineIds[i] = Integer.parseInt(id[i]);
				name[i] = (String) jdata.getString(id[i]);
			}
			
			//before populate the spinner it needs to be sorted
			sort_array(name, "machine");
			
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(WorkDetailActivity.this, android.R.layout.simple_spinner_item, name);
			adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			spnMachine=(Spinner)findViewById(R.id.spnMachine);
			spnMachine.setAdapter(adapter);
							
		}catch(JSONException e){
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @param responseStr
	 */
	public void populate_problem_spinner(String responseStr){
		try{
			JSONObject obj = new JSONObject(responseStr);
			
			String[] id,name;					
			JSONObject jdata = obj.getJSONObject("Problem");

			id = new String[jdata.length() + 1];
			name = new String[jdata.length() + 1];
			
			problemIds = new int[jdata.length() + 1];

			Iterator<?> keys = jdata.keys();
			
			id[0] = "0";
			machineIds[0] = 0;
			name[0] = "Select Problem";

			for(int i=1;i<=jdata.length();i++){
				id[i] = (String) keys.next();
				problemIds[i] = Integer.parseInt(id[i]);
				name[i] = (String) jdata.getString(id[i]);
			}
			
			//before populate the spinner it needs to be sorted
			sort_array(name, "problem");
			
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(WorkDetailActivity.this, android.R.layout.simple_spinner_item, name);
			adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			spnProblem=(Spinner)findViewById(R.id.spnProblem);
			spnProblem.setAdapter(adapter);
							
		}catch(JSONException e){
			e.printStackTrace();
		}	
	}
	
	/**
	 * 
	 * @param responseStr
	 */
	public void populate_status_spinner(String responseStr){
		try{
			JSONObject obj = new JSONObject(responseStr);
			
			String[] id,name;					
			JSONObject jdata = obj.getJSONObject("Status");

			id = new String[jdata.length() + 1];
			name = new String[jdata.length() + 1];
			statusIds = new int[jdata.length() + 1];

			Iterator<?> keys = jdata.keys();			
			
			id[0] = "0";
			machineIds[0] = 0;
			name[0] = "Select Status";

			for(int i=1;i<=jdata.length();i++){				
				id[i] = (String) keys.next();	
				statusIds[i] = Integer.parseInt(id[i]);
				name[i] = (String) jdata.getString(id[i]);
			}
			
			//before populate the spinner it needs to be sorted
			sort_array(name, "status");
			
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(WorkDetailActivity.this, android.R.layout.simple_spinner_item, name);
			adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			spnStatus=(Spinner)findViewById(R.id.spnStatus);
			spnStatus.setAdapter(adapter);
			
			formReady = true;
							
		}catch(JSONException e){
			e.printStackTrace();
		}
	}
	
	/**
     * 
     * @param name
     */
    public void sort_array( String[] items, String itemsName ){
    	
    	int totalItem = items.length;
    	String temp;    	
    	
    	for(int i=1, j, tempIndex; i < totalItem-1; i++){
    		for(j=i+1; j<totalItem; j++){
    			
    			if( items[i].compareToIgnoreCase(items[j]) >0 ){
    				temp = items[j];
    				items[j] = items[i];
    				items[i] = temp;
    				
    				if( itemsName.equals("machine") ){
    					tempIndex = machineIds[j];
    					machineIds[j] = machineIds[i];
    					machineIds[i] = tempIndex;
    				}else if( itemsName.equals("problem") ){
    					tempIndex = problemIds[j];
    					problemIds[j] = problemIds[i];
    					problemIds[i] = tempIndex;
    				}else{
    					tempIndex = statusIds[j];
    					statusIds[j] = statusIds[i];
    					statusIds[i] = tempIndex;
    				}
    			}
    		}
    	}
    }
	
	/**
	 * It does the tasks after complete a async task.
	 */
	public void asyncCompleted(){
		if(methodInAsync.equals("get_machine_problem_status")){
				populate_machine_spinner(responseString);
				populate_problem_spinner(responseString);
				populate_status_spinner(responseString);
		}		
	}
	
	
	private class SaveWorkDetail extends AsyncTask <String, Void, String> {
		
		private ProgressDialog saveProgressDialog;

    	@Override
    	protected void onPreExecute(){ 
    	   super.onPreExecute();
    	   saveProgressDialog = new ProgressDialog(WorkDetailActivity.this);
    	   saveProgressDialog.setMessage("Saving is going on. Please wait a while.");
    	   saveProgressDialog.show();    
    	}
		
		String responseStr = "";
    	
		protected String doInBackground(String... temps) {
			
			EditText comment = (EditText)findViewById(R.id.etComment);	    	
	        // Add your data
	        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(9);
	        //nameValuePairs.add(new BasicNameValuePair("token","test_token"));
	        nameValuePairs.add(new BasicNameValuePair("engineer_id",String.valueOf(engineerId)));
	        nameValuePairs.add(new BasicNameValuePair("session_id", String.valueOf(sessionId)));
	        nameValuePairs.add(new BasicNameValuePair("company_id",String.valueOf(companyId)));
	        nameValuePairs.add(new BasicNameValuePair("machine_id", String.valueOf(machineIds[(int) spnMachine.getSelectedItemId()])));
	        nameValuePairs.add(new BasicNameValuePair("problem_id", String.valueOf(problemIds[(int)spnProblem.getSelectedItemId()])));
	        nameValuePairs.add(new BasicNameValuePair("status_id", String.valueOf(statusIds[(int)spnStatus.getSelectedItemId()])));
	        nameValuePairs.add(new BasicNameValuePair("comment", comment.getText().toString()));
	        nameValuePairs.add(new BasicNameValuePair("lattitude", String.valueOf(lattitude)));
	        nameValuePairs.add(new BasicNameValuePair("longitude", String.valueOf(longitude)));
			
			
			
			//ArrayList<NameValuePair> nvPair = nameValuePairs[0];
			
	        try {
	        	// Create a new HttpClient and Post Header
	    	    HttpClient httpclient = new DefaultHttpClient();
	    	    HttpPost httppost = new HttpPost(MainActivity.API_URL+"save_work_detail");
	    	    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

		        // Execute HTTP Post Request
		        HttpResponse response = httpclient.execute(httppost);
		        responseStr = EntityUtils.toString(response.getEntity());
		        
		        Log.i("Work Detaillllllllllll", response.toString());
		        //responseStr = response.toString();

	        } catch (Exception e) {
	          e.printStackTrace();
	        }
			return responseStr;
		}
		
		protected void onPostExecute(String responseStr) {
			Log.i("Machine", responseStr);
			if (responseStr!=null) {	
				Log.i("Machine", responseStr);
				if( responseStr.equals("Your session has been expired!") ){
					Toast.makeText(WorkDetailActivity.this, "Save failed! Logout first and then login again", Toast.LENGTH_LONG).show();
					show_alert_dialog("Save Failed!", "Session expired. Login again");
				}else{
					Toast.makeText(WorkDetailActivity.this, "Work Detail save successful", Toast.LENGTH_LONG).show();
					show_alert_dialog("Save Successful", "Work details has been saved");
				}
			}	
			saveProgressDialog.dismiss();
		}    
    }
	
	/**
	 * 
	 */
    private class MakeAPICall extends AsyncTask <String, Void, String> {
    	
    	private ProgressDialog apiProgressDialog;

    	@Override
    	protected void onPreExecute(){ 
    	   super.onPreExecute();
    	   apiProgressDialog = new ProgressDialog(WorkDetailActivity.this);
    	   apiProgressDialog.setMessage("Execution is in process. Please wait a while.");
    	   apiProgressDialog.show();    
    	}
    	
		protected String doInBackground(String... urls) {
			String responseStr = "";
			
		      for (String url : urls) {
		        DefaultHttpClient client = new DefaultHttpClient();
		        HttpGet httpGet = new HttpGet(url);
		        try {
		          HttpResponse response = client.execute(httpGet);		          
		          HttpEntity entity = response.getEntity();
			        ByteArrayOutputStream out = new ByteArrayOutputStream();
			        entity.writeTo(out);
			        out.close();
			        responseStr = out.toString();	        

		        } catch (Exception e) {
		          e.printStackTrace();
		        }
		      }
			return responseStr;
		}
		
		protected void onPostExecute(String responseStr) {
			Log.i("Machine", responseStr);
			if (responseStr!=null) {	
				Log.i("Machine", responseStr);
				responseString = responseStr;
				asyncCompleted();
			}	
			apiProgressDialog.dismiss();
			
			//after complete the session destroy(it means logout completed) intent should be finished
			if( methodInAsync.equals("destroy_session") ){
				finish();
			}
		}    
    }
    
    /**
     * Finish the intent
     */
    public void finish() {
//	    Intent intent = new Intent();
//	    setResult(RESULT_OK, intent);
	    super.finish();
	}
}
